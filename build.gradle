import org.apache.tools.ant.taskdefs.condition.Os
import java.util.zip.GZIPOutputStream;

task wrapper(type: Wrapper) { gradleVersion = '2.0' }

defaultTasks "buildAll"

buildscript {
	dependencies { classpath files("repository/gradle-aspectj-1.5.jar") }
	repositories {
		mavenCentral()
		jcenter()
	}
}

ext.os = [Os.FAMILY_WINDOWS, Os.FAMILY_MAC, Os.FAMILY_UNIX].find {String family ->
	Os.isFamily(family)
}

ext.aspectjVersion = '1.8.5'
ext.currentBranch = getCurrentBranch();
ext.clientDir=gradle.getRootProject().getRootDir().toString()+"/client"
ext.qooxdooBuildDir=gradle.getRootProject().getRootDir().toString()+"/build/${currentBranch}/qooxdooBuild"
ext.rootDir=gradle.getRootProject().getRootDir().toString()
ext.docbookZipFile=gradle.getRootProject().getRootDir().toString()+"/bundles/docbook/src/main/resources/docbook.zip"
ext.docbookOut=gradle.getRootProject().getRootDir().toString()+"/bundles/docbook/docbookUnzipped"
ext.qoodooSDK="${rootDir}/build/${currentBranch}/.qooxdooSDK";
ext.bundlesBuild="${rootDir}/build/${currentBranch}/bundlesBuild";
ext.surfaceBuild="${rootDir}/build/${currentBranch}/surfaceBuild";
ext.repository="${rootDir}/repository";
ext.jsLibs="libs.js";
ext.cssLibs="libs.css";

configure(subprojects - 
	project(":client") - 
	project(':surface') -
	project(':surface/domelements') - 
	project(':surface/css') - 
	project(':surface/js')){ s->
	def rootDir = getRootProject().getRootDir().toString()
	ext.shortName = getShortName(s.name);

	configurations {
		vfs
		bnd
		ajtools
	}

	apply plugin: 'groovy'
	apply plugin: 'aspectj'

	defaultTasks "copyToRepo"

//	sourceCompatibility = '1.6'
//	targetCompatibility = '1.6'

	jar.enabled=false
	test.enabled=false

	dependencies {
		ajtools files("${rootDir}/repository/aspectjtools-1.8.5.jar")
		vfs files("${rootDir}/repository/commons-vfs-1.0.jar")
		vfs files("${rootDir}/repository/commons-logging-1.1.1.jar")
		bnd files("${rootDir}/repository/biz.aQute.bnd-3.0.0.jar")
		compile files("${rootDir}/repository/biz.aQute.bnd-3.0.0.jar")
		compile files("${rootDir}/repository/groovy-all-2.4.4-indy.jar");
		compile files("${rootDir}/repository/aspectjrt-1.8.5.jar")
		compile files("${rootDir}/repository/shiro-aspectj-1.2.0.jar")
		compile files("${rootDir}/repository/shiro-core-1.2.0.jar")
		aspectpath files("../../repository/shiro-aspectj-1.2.0.jar")
	}
	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
		}
	}

	compileGroovy.options.define(
		compilerArgs: ["-nowarn", "-Xlint:-unchecked", "-encoding", "UTF-8"
		]);

	ant.taskdef( resource: 'aQute/bnd/ant/taskdef.properties', classpath: configurations.bnd.asPath)
	ant.taskdef( resource: 'org/apache/commons/vfs/tasks/tasks.properties',classpath:configurations.vfs.asPath)

	sourceSets {
		main {
			java { srcDir 'src/main/java' }
			groovy { srcDir 'src/main/java' }
			resources { srcDir 'src/main/resources' }
		}
	}
	sourceSets.main.ext.classesDir = new File ( 'build/classes/main' )
	task unzipDocbook(type: Copy) {
		def zipFile = file("${docbookZipFile}")
		into file(docbookOut)
		from zipTree(zipFile)
		outputs.upToDateWhen { file(docbookOut+"/xml").isDirectory() }
	}

	task projectClean (type:Task) {
		doLast{
			ant.delete ( dir:"build/libs/bundles" );
			ant.mkdir  ( dir:"build/libs/bundles" );
			ant.delete ( dir:"tmp" );
			ant.mkdir  ( dir:"tmp" );
		}
	}
	task makeBundle (type:Task){
		if( shortName=="docbook"){
			dependsOn classes,unzipDocbook
		}else{
			dependsOn classes
		}
		doLast{
			ant.zip( destfile:"tmp/bundle.zip",
			basedir:"build/classes/main",
			includes:"**/*.class,OSGI-INF/**",
			excludes:"test/**"
			)
			ant.bnd(
				failok:true,
				exceptions:true,
				classpath : "tmp/bundle.zip:${configurations.compile.asPath}",
				output:"build/libs/bundles/org.ms123.common.${shortName}-1.0.0.jar",
				files:"osgi.bnd"
				)
		}
	}
	task copyToRepo (type:Task) {
		if( shortName == "admin" || shortName == "launcher"){
			dependsOn jar
		}else{
			dependsOn makeBundle
		}
		ant.mkdir  ( dir:"${bundlesBuild}" );
		doLast{
			if( shortName == "admin" || shortName == "launcher"){
				ant.copy( file:"build/libs/bundles/${shortName}-1.0.0.jar", tofile:"${bundlesBuild}/org.ms123.${shortName}-${version}.jar",overwrite:"true")
			}else{
				ant.copy( file:"build/libs/bundles/org.ms123.common.${shortName}-1.0.0.jar", todir:"${bundlesBuild}",overwrite:"true")
			}
		}
	}
	compileGroovy.dependsOn.remove("compileJava")
	compileJava.dependsOn(compileGroovy)
	compileGroovy.dependsOn projectClean
}


configure(project(":client")){
	task copyToRepo (type:Task) { }
	task projectClean (type:Task) { }
	task unzipQooxdoo(type: Copy) {
		def zipFile = file("${clientDir}/qooxdoo-sdk.zip")
		into file(qoodooSDK)
		from zipTree(zipFile)
		outputs.upToDateWhen { file(qoodooSDK).isDirectory() }
	}
	task compileQooxdoo (type:Task) {
		if(!file(qoodooSDK).isDirectory()){
			dependsOn unzipQooxdoo
		}
		doLast(){
			compileQooxdoo("common");
			gzipFile("${qooxdooBuildDir}/common/script/ms123.js", "${qooxdooBuildDir}/common/script/ms123.js.gz");
		}
	}
	task compileWebsite (type:Task) {
		if(!file(qoodooSDK).isDirectory()){
			dependsOn unzipQooxdoo
		}
		doLast(){
			compileQooxdoo("website");
			gzipFile("${qooxdooBuildDir}/website/script/website.js", "${qooxdooBuildDir}/website/script/website.js.gz");
		}
	}
}

configure(project(":surface")){
	task copyToRepo (type:Task) { }
	task projectClean (type:Task) { }
}

configure(project(":surface/domelements")){
	task copyToRepo (type:Task) { }
	task projectClean (type:Task) { }
}

configure(project(":surface/css")){
	task copyToRepo (type:Task) { }
	task projectClean (type:Task) { }
}

configure(project(":surface/js")){
	task copyToRepo (type:Task) { }
	task projectClean (type:Task) { }
}

task buildAll(type: Task) {
	dependsOn subprojects.copyToRepo

	evaluationDependsOnChildren()
	project(':surface/domelements').copyToRepo.dependsOn(project(":surface/domelements").buildAll)
	project(':surface/js').copyToRepo.dependsOn(project(":surface/js").buildAll)
	project(':surface/css').copyToRepo.dependsOn(project(":surface/css").buildAll)

	def currentDir = gradle.getStartParameter().getCurrentDir().toString();
	def projectDir = gradle.getRootProject().getRootDir().toString();
	if( currentDir == projectDir){
		def settingsText = new File(gradle.rootProject.getProjectDir(),"settings.gradle").text
		def listText = settingsText =~ /(?ms)(include(.*)?)/
		def projectList = Eval.me('['+listText[0][2]+']');

		def prev = null;
		projectList.each() {s->
			if( prev ){
				getProjectClean(s).dependsOn(getCopyRepo(prev));
			}else{
				getProjectClean(s).dependsOn(getCompileQooxdoo(":client"),getCompileWebsite(":client"));
			}
			prev = s;
		}
	}
}

task deploy(type: Task) {
	dependsOn(project(":surface/domelements").buildAll)
	doLast(){
		def dest = new File(rootProject.property("deploy.directory")).getCanonicalPath().toString();
		println("deploying to -> "+dest);

		deployServerPart(dest);
		copyFiles(dest);
		deployClientPart(dest);
		deploySurfacePart(dest);
	}
}

def getCompileQooxdoo(name){
	return gradle.rootProject.project(name).compileQooxdoo;
}
def getCompileWebsite(name){
	return gradle.rootProject.project(name).compileWebsite;
}
def getProjectClean(name){
	return gradle.rootProject.project(name).projectClean;
}
def getCopyRepo(name){
	return gradle.rootProject.project(name).copyToRepo;
}

def getCurrentBranch() {
	def stdOut = new ByteArrayOutputStream()
	try{
		exec {
			commandLine 'git rev-parse --abbrev-ref HEAD'.tokenize()
			standardOutput =stdOut
		}
		return stdOut.toString().trim()
	}catch(e){
		return "master";
	}
}

def getShortName(name){
	def shortName = name.split("/")
	if( shortName.length==1){
		return shortName[0]
	}else{
		return shortName[1]
	}
}

def compileQooxdoo(what) {
	def cache = "${rootDir}/build/${currentBranch}/.qooxdooCache";
	if( os == "unix" || os == "mac"){
		println( "commandLine \"python  ${qoodooSDK}/tool/bin/generator.py -I -m CACHE:${cache} --macro=QOOXDOO_PATH:${qoodooSDK}  --config=${clientDir}/${what}/config.json build\".tokenize()")
		exec {
			commandLine "python  ${qoodooSDK}/tool/bin/generator.py -I -m CACHE:${cache} --macro=QOOXDOO_PATH:${qoodooSDK}  --config=${clientDir}/${what}/config.json build".tokenize()
		}
	}else{
		exec {
			commandLine "bin\\py.exe  ${qoodooSDK}/tool/bin/generator.py -I --macro=QOOXDOO_PATH:${qoodooSDK}  --config=${clientDir}/${what}/config.json build".tokenize()
		}
	}
	new groovy.util.AntBuilder().copy( overwrite:true, verbose:false, todir:"${qooxdooBuildDir}/${what}"){
		fileset(dir:"${clientDir}/${what}/build") {
		}
	}
	new groovy.util.AntBuilder().delete ( dir:"${clientDir}/${what}/build" );
}

def deployClientPart(destdir){
	new groovy.util.AntBuilder().copy( overwrite:true, verbose:false, todir:"${destdir}/client/common/build"){
		fileset(dir:"${qooxdooBuildDir}/common") {
		}
	}
	new groovy.util.AntBuilder().copy( overwrite:true, verbose:false, todir:"${destdir}/client/website/build"){
		fileset(dir:"${qooxdooBuildDir}/website") {
		}
	}
	new groovy.util.AntBuilder().copy( overwrite:true, verbose:false, todir:"${destdir}/client/common/build/resource/openseadragon"){
		fileset(dir:"${rootDir}/client/common/source/resource/openseadragon") {
		}
	}
	new groovy.util.AntBuilder().copy( overwrite:true, verbose:false, todir:"${destdir}/client/common/build/resource/eip"){
		fileset(dir:"${rootDir}/client/common/source/resource/eip") {
		}
	}
}

def deploySurfacePart(destdir){
	new groovy.util.AntBuilder().copy( overwrite:true, verbose:false, todir:"${destdir}/client/surface"){
		fileset(dir:"${surfaceBuild}", includes:"*") {
		}
	}
}


def deployServerPart(destdir){
	def dir = new File(destdir);
	if( !dir.exists()){
		dir.mkdirs();
	}
	if( os == "unix" || os == "mac" ){
		exec {
			commandLine "${rootDir}/bin/pax.sh -s ${rootDir}  -d ${destdir}".tokenize()
		}
	}else{
		exec {
			commandLine "${rootDir}/bin/pax.bat -s ${rootDir}  -d ${destdir}".tokenize()
		}
	}
}

def copyFiles(destdir){
	if( os == "unix" || os == "mac" ){
		exec {
			commandLine "${rootDir}/bin/copy.sh -s ${rootDir}  -d ${destdir}".tokenize()
		}
	}else{
		exec {
			commandLine "${rootDir}/bin/copy.bat -s ${rootDir}  -d ${destdir}".tokenize()
		}
	}
}

def gzipFile(sourcePath, destPath) {
	byte[] buffer = new byte[1024];
	def fileOutputStream =new FileOutputStream(destPath);
	def gzipOuputStream = new GZIPOutputStream(fileOutputStream);
	def fileInput = new FileInputStream(sourcePath);

	int bytesRead;
	while ((bytesRead = fileInput.read(buffer)) > 0) {
		gzipOuputStream.write(buffer, 0, bytesRead);
	}

	fileInput.close();
	gzipOuputStream.finish();
	gzipOuputStream.close();
	println("The file was compressed successfully!");
}

